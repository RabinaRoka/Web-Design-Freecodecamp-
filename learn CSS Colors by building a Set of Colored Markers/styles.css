
/* step 8 */
h1 {
    text-align: center;
   
  }

/* step11 and 12*/
.marker {
    width: 200px;
    height: 25px;

    margin: 10px auto;
  }

 
  .container {
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
  }

  /* .one {
    background-color: rgb(255, 255, 0);
  } 

  .one {
    background-color: rgb(255, 127, 0);
  }

  /* .two {
    background-color: rgb(0, 255, 255);
  } 

  .two {
    background-color: rgb(0, 255, 127);
  }
  
  /* .three {
    background-color:rgb(255,0,255);
  } 

  .three {
    background-color: rgb(127, 0, 255);
  }

  /* There are three more tertiary colors: chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta). */
  /* .one {
    background-color: rgb(127, 255, 0);
  }
  
  .two {
    background-color: rgb(0, 127, 255);
  }
  
  .three {
    background-color: rgb(255, 0, 127);
  } */

  /* Remember that the rgb function uses the additive color model, where colors start as black and change as the values of red, green, and blue increase. */
  /* .one {
    background-color: rgb(0, 0, 0);
  }
  
  .two {
    background-color: rgb(0, 0, 0);
  } */
  
  /* .three {
    background-color: rgb(0, 0, 0);
  }

  .one {
    background-color: rgb(255, 0, 0);
  }
  
  .two {
    background-color: rgb(0, 255, 255);
  } */


  /* making red coor for important heading , buttons and links. */
  .one {
    background-color: rgb(0, 0, 0);
  }
  
  .two {
    background-color: rgb(255, 0, 0);
  }
  
  .three {
    background-color: rgb(0, 0, 0);
  }

/* step 45 */
  .red {
    background-color: rgb(255, 0, 0);
  }
  
  .green {
    background-color: rgb(0, 0, 0);
  }
  
  .blue{
    background-color: rgb(0, 0, 0);
  }


  /* Step 46 With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0). 
  .green {
    background-color: #00FF00
  }*/

  
.green {
    background-color: #007F00;
  }


  .blue {
    background-color: hsl(240, 100%, 50%);
  }

/* step 49 */
  .red {
    background: rgb(255, 0, 0);
  }

  /* linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl. */
  .red {
    background: linear-gradient( 90deg);
  }

  .red {
    background: linear-gradient(90deg, rgb(255,0,0));
  }

  .red {
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0,255,0));
  }

  .red {
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0),rgb(0, 0, 255));
  }

  /* In the linear-gradient function, add a 75% color stop after the first red color argument. Do not add color stops to the other colors arguments. 
  .red {
    background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));
  }*/

  
  /* STEP55
.red {
  background: linear-gradient(180deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));
}

STEP 56
.red {
  background: linear-gradient(180deg, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255)100%);
} */

/* step57
.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%);
}*/

/* step 58

.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(0, 0, 255) 100%);
} */


/* step 59*/
.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
} 


/* step 60 

.green {
  background: #007F00;
}

Step 61*/
.green {
  background:linear-gradient(180deg, #55680D);
}

/* Step 62 */
.green {
  background: linear-gradient(180deg, #55680D, #71F53E);
}

/* Step63 */
.green {
  background: linear-gradient(180deg, #55680D, #71F53E, #116C31);
}

/* step 64 */
.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) , rgb(245, 62, 113) , rgb(162, 27, 27));
}


.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
}


/* step 65 */
.green {
  background: linear-gradient( #55680D, #71F53E, #116C31);
}

/* .blue {
  background: linear-gradient(hsl(186, 76%, 16%));
}

.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%));
} */

/* step 69 */
.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%),hsl(240,56%,42%));
}


/* step 71, 72,73 */
.sleeve{
  width:110px;
  height:25px;
  background-color:rgb(255,255,255,0.5);
  opacity:0.5;
}

/* step 77 */
.cap{
  width:60px;
  height:25px;
}

/* step 78 */
.cap, .sleeve {
  display:inline-block;
}

/* step 79 
.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left-width:10px;
  border-left-style:solid;
  border-left-color: black;
}*/


/* step 82  all same with border-left
.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left:10px solid black;
}*/


/* step 83 */
.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left: 10px double black;
}

/* step 84 */
.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left: 10px double rgba(0,0,0,0.75);
}
/* Here's how the offsetX and offsetY values work:

both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change. */

.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
  box-shadow: 5px 5px red;
}


/* But what if you wanted to position your shadow on the opposite side? You can do that by using negative values for offsetX and offsetY.

Update the values for the box-shadow property, and set offsetX to -5px, and offsetY to -5px. */
.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
  box-shadow: -5px -5px red;
}

.green {
  background: linear-gradient(#55680D, #71F53E, #116C31);
  box-shadow: 5px 5px 5px green;
}

/* But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:

Example Code
box-shadow: offsetX offsetY blurRadius spreadRadius color; */
.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
  box-shadow:0px 0px 0px 5px blue;
}


/* Step 90
Now that you're familiar with the box-shadow property you can finalize the shadows, starting with the one for the red marker. */

.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
  box-shadow: 0px 0px 20px 0px red;
}


/* Step 91
Next, update the color value of the red marker's box-shadow property. */

.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
  box-shadow: 0 0 20px 0 rgb(83 , 14, 14,0.8);
}


/* Step 92
The shadows for your green and blue markers will have the same position, blur, and spread. The only difference will be the colors.

In the .green and .blue CSS rules, update the values for the box-shadow properties so offsetX is 0,offsetY is 0, blurRadius is 20px, and spreadRadius is 0. Leave the colors as green and blue for now. */
.green {
  background: linear-gradient(#55680D, #71F53E, #116C31);
  box-shadow:0 0 20px 0 green;
}

.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
  box-shadow: 0 0 20px 0 blue;
}

/* Step 93 */

.green {
  background: linear-gradient(#55680D, #71F53E, #116C31);
  box-shadow: 0 0 20px 0 #3B7E20CC;
}

/* Step 94
Finally, for the blue marker's box-shadow property, replace the named color with the hsla function. */
.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
  box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);
}